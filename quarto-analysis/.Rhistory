units = "mins")
)
# completers
completers = meta %>% filter(session == 2) %>% reframe(id = unique(id))
meta$completer = ifelse(meta$id %in% completers$id, 1, 0)
cueTrials = cueTrials %>% filter(id %in% completers$id)
testTrials = testTrials %>% filter(id %in% completers$id)
# first modality / first test (obsolete after ID=08)
firstModalities = cueTrials %>% filter(trialNum == 1) %>%
group_by(id) %>% slice_min(start_time) %>% mutate(first = 1)
firstTest = testTrials %>% filter(trialNum == 1, trial_type == "test_practice") %>%
group_by(id) %>% slice_min(start_time) %>% mutate(first = 1)
meta$first_modality = ifelse(meta$id %in% firstModalities$id, firstModalities$cue_type, NA)
meta$first_test = ifelse(meta$id %in% firstTest$id, firstTest$test_type, NA)
# datasets
cueTrials = cueTrials %>% mutate(
idk = as.integer(is.na(cueTrials$emp_resp_0) | is.na(cueTrials$emp_resp_1)),
acc = ifelse(idk == 0, correct_resp_0 == emp_resp_0 &
correct_resp_1 == emp_resp_1, 0),
rt = ifelse(is.na(resp_RT_1), resp_RT_0, resp_RT_0 + resp_RT_1)) %>%
filter(rt <= 15)
testTrials = testTrials %>%
mutate(idk = as.integer(is.na(emp_resp)),
acc = ifelse(idk == 0, correct_resp == emp_resp, 0),
rt = resp_RT)
testPracticeTrials = testTrials %>% filter(trial_type == "test_practice") %>%
mutate(rt = ifelse(rt <= 14.0, rt, NA))
dualTrials = testTrials %>% filter(trial_type == "generic" & !is.na(rt))
#| warning: false
#| label: fig-meta
#| fig-subcap:
#|   - "Sample *duration* distribution (box and whiskers) per session."
#|   - "Sample *age* distribution."
#|   - "Sample *gender* distribution."
#| layout-ncol: 2
# Duration
meta %>% filter(completer == 1) %>%
ggplot(aes(x=session, y=duration)) +
geom_boxplot() +
coord_flip() +
scale_y_continuous(breaks = seq(40, 80, 5)) +
ylab("Duration [min]") + xlab("Session") +
theme_minimal() +
theme(
panel.border = element_rect(colour = "gray", fill=NA, size=1),
panel.spacing = unit(2.5, "lines"),
axis.text = element_text(size = 16),
axis.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(vjust = -1),
axis.title.x = element_text(margin = margin(t = 20)),
axis.title.y = element_text(margin = margin(r = 20)),
plot.margin = margin(1, 1, 0, 0, "cm")
)
# Age
meta %>% filter(session==2) %>% ggplot(aes(x = age)) +
geom_histogram(color = "darkgray", fill = "gray") +
scale_y_continuous(expand = c(0, 0), breaks = seq(0, 20, 1)) +
scale_x_continuous(breaks = seq(18, 99, 1)) +
xlab("Age") + ylab("Count") +
theme_minimal() +
theme(
panel.border = element_rect(colour = "gray", fill=NA, size=1),
panel.spacing = unit(2.5, "lines"),
axis.text = element_text(size = 16),
axis.title = element_text(size = 16, face = "bold"),
axis.text.x = element_text(vjust = -1),
axis.title.x = element_text(margin = margin(t = 20)),
axis.title.y = element_text(margin = margin(r = 20)),
legend.position = "none",
plot.margin = margin(1, 1, 0, 0, "cm")
)
# Gender
meta %>% filter(session==2) %>% group_by(gender) %>% tally() %>%
ggplot(aes(x = "", y = n, fill = gender)) +
geom_bar(stat = "identity",
width = 1,
color = "white") +
coord_polar("y", start = 0) +
geom_text(
aes(label = n),
position = position_stack(vjust = 0.5),
col = "white",
size = 8
) +
scale_fill_brewer(name = "Gender", palette = "Set1") +
theme_void() +
theme(
legend.text = element_text(size = 14),
legend.title = element_text(size = 18),
plot.margin = margin(1, 1, 0, 0, "cm")
)
#| label: plotting-functions
raiseBars = function(df, xvar="", xlabel="", ylabel="", text_y=0.5, textsize=5, dropLegend=T){
p = ggplot(df, aes(x=get(xvar), y=mean_rt, fill=factor(acc))) +
geom_bar(stat="identity", position=position_dodge(), color = "white") +
geom_errorbar(aes(ymin=mean_rt-sd, ymax=mean_rt+sd),
alpha=0.3, linewidth=0.5, width=0.5,
position=position_dodge(0.9))+
geom_text(aes(label = n, y = text_y),
position=position_dodge(0.9),
color="white",
size = textsize,
fontface = "bold") +
facet_wrap(~id)+
scale_fill_manual(values = c("darkred", "darkolivegreen4"))+
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0),
breaks = seq(0, 10, 2)) +
theme_minimal()+
guides(fill = guide_legend(title = "Accuracy"))+
xlab(xlabel) +
ylab(paste(ylabel, "RT [s]")) +
theme(
panel.border = element_rect(colour = "gray", fill=NA, size=1),
axis.text = element_text(size = 10),
axis.title.x = element_text(margin = margin(t = 20)),
axis.title.y = element_text(margin = margin(r = 20)),
axis.title = element_text(size = 14, face = "bold"),
strip.text.x = element_text(size = 14, face = "bold.italic"),
panel.spacing = unit(2.5, "lines"),
legend.position = c(0.85, 0.2),
plot.margin = margin(1, 1, 0, 0, "cm")
)
if (dropLegend) {
p = p + theme(legend.position = "none")
}
return(p)
}
makeWaves = function(dfLong, facetvar="", xlabel="", threshold=2){
p = ggplot(dfLong, aes(y=id)) +
geom_density_ridges(aes(x = rt, fill = factor(acc)), scale = 1.0,
alpha = .6, color = "white", rel_min_height=1e-05)+
geom_vline(xintercept = threshold, linetype="dashed", color = "darkred")
if (facetvar != "") {
p = p + facet_wrap(~ get(facetvar))
}
p = p + scale_fill_manual(values=c("darkred", "darkolivegreen4"))+
scale_x_continuous(expand = c(0, 0), breaks = seq(0, 14, 2)) +
scale_y_discrete(expand = c(0, 0), limits = rev(unique(sort(dfLong$id)))) +
coord_cartesian(clip = "off") +
theme_minimal(base_size = 14) +
ylab("Subject ID") +
xlab(paste(xlabel, "RT [s]")) +
theme(
panel.border = element_rect(colour = "gray", fill=NA, size=1),
axis.text = element_text(size = 10),
axis.text.y = element_text(vjust = 0, angle = 45),
axis.title.x = element_text(margin = margin(t = 20)),
axis.title.y = element_text(margin = margin(r = 12)),
axis.title = element_text(size = 14, face = "bold"),
strip.text.x = element_text(size = 14, face = "bold.italic", vjust = 4,
margin = margin(t = 20)),
plot.margin = margin(1, 1, 0, 0, "cm"),
legend.position = "none"
)
return(p)
}
cookLasagne = function(dfLong, facetvar="", title="", threshold=2.0){
p = ggplot(dfLong, aes(x = trialNum, y = id)) +
geom_raster(aes(fill = rt), data = subset(dfLong, acc == 1), alpha = 0.8) +
scale_fill_gradientn("1-RT [s]",
colors = c("goldenrod", "white", "darkolivegreen4"),
values = c(1.0, threshold/14 + 0.01,
threshold/14 - 0.01, 0),
breaks = seq(0, 14, 2),
limits = c(0,14)) +
new_scale("fill") +
geom_raster(aes(fill = rt), data = subset(dfLong, acc == 0)) +
scale_fill_gradient("0-RT [s]",
low = "thistle2", high = "darkred",
breaks = seq(0, 14, 2),
limits = c(0,14))
if (facetvar != "") {
p = p + facet_wrap(~ get(facetvar), nrow = 3, scales = "free_y")
}
p = p + scale_x_continuous(expand = c(0, 0), breaks = seq(0, 140, 10)) +
scale_y_discrete(expand = c(0, 0), limits = rev(unique(sort(dfLong$id)))) +
coord_cartesian(clip = "off") +
theme_minimal(base_size = 14) +
xlab("Trial Number") +
ylab("Subject ID") +
ggtitle(title) +
theme(
panel.border = element_rect(colour = "gray", fill=NA, size=1),
axis.text = element_text(size = 10),
axis.text.x = element_text(hjust = 0.5, angle = 0),
axis.text.y = element_text(vjust = 0, angle = 45),
axis.title.x = element_text(margin = margin(t = 20)),
axis.title.y = element_text(margin = margin(r = 20)),
axis.title = element_text(size = 14, face = "bold"),
legend.title = element_text(size = 14, face = "bold", vjust = 2),
strip.text.x = element_text(size = 14, face = "bold.italic", vjust = 4,
margin = margin(t = 20)),
plot.title = element_text(face = "bold", size=16, hjust=0.5),
plot.margin = margin(0, 0, 0, 0, "cm")
)
return(p)
}
#| warning: false
#| label: fig-cue-leearning-long
#| fig-cap: "Participant-wise reaction times over **cue learning** trials with performance-dependend color code (green: correct, yellow: too slow, red: error, grey: *idk*)."
#| fig-subcap:
#|   - "Threshold: 2.0"
#|   - "Threshold: 2.5"
#| layout-ncol: 2
#| column: body-outset
cueTrials %>%
mutate(rt = ifelse(idk == 1, NA, rt)) %>%
cookLasagne("cue_type", threshold=2.0) +
theme(legend.position = "none")
cueTrials %>%
mutate(rt = ifelse(idk == 1, NA, rt)) %>%
cookLasagne("cue_type", threshold=2.5) +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank())
#| warning: false
#| label: fig-test-learning-long
#| fig-cap: "Participant-wise reaction times over **test learning** trials with performance-dependend color code (green: correct, yellow: too slow, red: error, grey: *idk*)."
testPracticeTrials %>%
mutate(rt = ifelse(idk == 1, NA, rt)) %>%
cookLasagne("test_type")
#| include: false
#| echo: false
corr = dualTrials %>% group_by(id, map_type) %>%
mutate(map_type = ifelse(map_type == "primitive", map_type, "composed")) %>%
summarize(mean_acc = mean(acc)) %>%
pivot_wider(id_cols = id, names_from = "map_type", values_from = "mean_acc") %>%
ungroup() %>% summarise(correlation = cor(primitive, composed))
#| warning: false
#| label: fig-session-2-long
#| fig-cap: "Participant-wise reaction times over **session 2** trials with performance-dependend color code (green: correct, yellow: too slow, red: error, grey: *idk*)."
#| fig-subcap:
#|   - "Single spells"
#|   - "Double spells"
#| layout-ncol: 2
#| column: body-outset
testTrials %>%
filter(trial_type == "generic" & map_type == "primitive") %>%
mutate(rt = ifelse(idk == 1, NA, rt)) %>%
cookLasagne() +
theme(legend.position = "none",
plot.margin = margin(0, 0, 0, 0, "cm"))
testTrials %>%
filter(trial_type == "generic" & map_type != "primitive") %>%
mutate(rt = ifelse(idk == 1, NA, rt)) %>%
cookLasagne() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
plot.margin = margin(0, 0, 0, 0, "cm"))
#| include: false
#| warning: false
addPool = function(df){
out = df %>% mutate(id = "pooled") %>% bind_rows(df)
return(out)
}
cueTrials = addPool(cueTrials)
testPracticeTrials = addPool(testPracticeTrials)
dualTrials = addPool(dualTrials)
#| warning: false
#| label: fig-cue-learning
#| fig-cap: "Participant-wise performance in **Cue-Learning** trials."
#| fig-subcap:
#|   - "Average reaction time and trial counts per *cue type* and *participant*. <br> Error bars indicate standard deviation, diamonds indicate first learnt modality."
#|   - "Kernel density estimators for reaction time per *cue type* and *participant*.<br>Red vertical bar indicates new *fast response* threshold."
cueTrials %>%
group_by(id, acc, cue_type) %>%
summarize(mean_rt = mean(rt), sd = sd(rt), n=n()) %>%
raiseBars("cue_type", "Cue Type", "Mean Cue Memory", dropLegend=T) +
geom_text(data = firstModalities, aes(x = cue_type, y = 5, label = "♦"), color = "darkgrey", alpha = 0.8, inherit.aes = F)
makeWaves(cueTrials, "cue_type", "Cue Memory", threshold = 2.5)
#| warning: false
#| label: fig-test-learning
#| fig-cap: "Participant-wise performance in **Test-Learning** trials."
#| fig-subcap:
#|   - "Average reaction time and trial counts per *cue type* and *participant*. <br> Error bars indicate standard deviation, spades indicate first learnt test type."
#|   - "Kernel density estimators for reaction time per *cue type* and *participant*.Red vertical bar indicates new *fast response* threshold."
testPracticeTrials %>%
filter(!is.na(rt)) %>%
group_by(id, acc, test_type) %>%
summarize(mean_rt = mean(rt), sd = sd(rt), n=n()) %>%
raiseBars("test_type", "Test Type", "Mean Test") +
geom_text(data = firstTest, aes(x = test_type, y = 5, label = "♠"), color = "darkgrey", alpha = 0.8, inherit.aes = F)
makeWaves(testPracticeTrials, "test_type", "Test")
#| warning: false
#| label: fig-cuextest
#| fig-cap: "Kernel density estimators for test RT per *cue type* (horiz.), *test type* (vert.) and *participant*. Red vertical bar indicates new *fast response* threshold."
testPracticeTrials %>%
bind_rows(dualTrials) %>%
ggplot(aes(y=id)) +
geom_density_ridges(aes(x = rt, fill = factor(acc)), scale = 1.0,
alpha = .6, color = "white", rel_min_height=1e-05) +
geom_vline(xintercept = 2.0, linetype="dashed", color = "darkred") +
facet_grid(test_type ~ cue_type) +
scale_fill_manual(values=c("darkred", "darkolivegreen4")) +
scale_x_continuous(expand = c(0, 0), breaks = seq(0, 14, 2)) +
scale_y_discrete(expand = c(0, 0), limits = rev(unique(sort(testPracticeTrials$id)))) +
coord_cartesian(clip = "off") +
theme_minimal(base_size = 14) +
ylab("Subject ID") +
xlab("Test RT [s]") +
theme(
panel.border = element_rect(colour = "gray", fill=NA, size=1),
axis.text = element_text(size = 10),
axis.text.y = element_text(vjust = 0, angle = 45),
axis.title.x = element_text(margin = margin(t = 20)),
axis.title.y = element_text(margin = margin(r = 12)),
axis.title = element_text(size = 14, face = "bold"),
strip.text = element_text(size = 14, face = "bold.italic"),
legend.position = "none"
)
#| warning: false
#| label: fig-cuextest-bar
#| fig-cap: Average test reaction time and trial counts per *cue type* and *participant*. <br> Error bars indicate standard deviation, diamonds indicate first learnt test type."
testPracticeTrials %>%
bind_rows(dualTrials) %>%
filter(!is.na(rt)) %>%
group_by(id, acc, cue_type) %>%
summarize(mean_rt = mean(rt), sd = sd(rt), n=n()) %>%
raiseBars("cue_type", "Cue Type", "Mean Test", dropLegend=T) +
geom_text(data = firstModalities, aes(x = cue_type, y = 4, label = "♦"), color = "darkgrey", alpha = 0.8, inherit.aes = F)
#| warning: false
#| label: fig-single-vs-double
#| fig-cap: "Average participant-wise reaction times and trial counts per *spell type*. <br> Error bars indicate standard deviation."
#| fig-subcap:
#|   - "Intermediate reaction time (time until spell was applied)."
#|   - "Test reaction time (time until subsequent test was solved)."
dualTrials %>%
group_by(id, map_type, acc) %>%
summarize(mean_rt = mean(inter_RT), sd = sd(inter_RT), n=n()) %>%
raiseBars("map_type", "Spell Type", "Mean Intermediate",
text_y=1.5, textsize=3, dropLegend=T) +
scale_x_discrete(limits = c("primitive", "second-only", "generic")) +
scale_y_continuous(expand = c(0, 0), breaks = seq(0, 20, 4)) +
scale_fill_manual(values = c("thistle4", "slategray3")) +
theme(axis.text.x = element_text(size = 8, vjust = 0.5, hjust=1, angle = 90))
dualTrials %>%
group_by(id, map_type, acc) %>%
summarize(mean_rt = mean(rt), sd = sd(rt), n=n()) %>%
raiseBars("map_type", "Spell Type", "Mean Test", dropLegend=T,
text_y = 0.4, textsize=3) +
scale_x_discrete(limits = c("primitive", "second-only", "generic")) +
theme(axis.text.x = element_text(size = 8, vjust = 0.5,  hjust=1, angle = 90))
#| warning: false
dualTrials %>%
group_by(id, trans_lb, acc) %>%
summarize(mean_rt = mean(inter_RT), sd = sd(inter_RT), n=n()) %>%
raiseBars("trans_lb", "#Transformations (lower bound)", "Mean Intermediate",
text_y=1.5, textsize=3, dropLegend=T) +
scale_x_continuous() +
scale_y_continuous(expand = c(0, 0), breaks = seq(0, 20, 4)) +
scale_fill_manual(values = c("thistle4", "slategray3")) +
theme(axis.text.x = element_text(size = 8))
dualTrials %>%
group_by(id, trans_ub, acc) %>%
summarize(mean_rt = mean(inter_RT), sd = sd(inter_RT), n=n()) %>%
raiseBars("trans_ub", "#Transformations (upper bound)", "Mean Intermediate",
text_y=1.5, textsize=3, dropLegend=T) +
scale_x_continuous() +
scale_y_continuous(expand = c(0, 0), breaks = seq(0, 20, 4)) +
scale_fill_manual(values = c("thistle4", "slategray3")) +
theme(axis.text.x = element_text(size = 8))
#| include: false
# remove "pooled" subject and add trial number (across the whole session)
dualTrials = dualTrials %>% filter(id != "pooled") %>%
group_by(id) %>% arrange(start_time) %>%
mutate(trialNumTotal = row_number()) %>% arrange(id)
# set some reference variables
dualTrials$map_type = factor(dualTrials$map_type, ordered=F)
dualTrials$map_type = relevel(dualTrials$map_type, ref = "primitive")
dualTrials$test_type = factor(dualTrials$test_type, ordered=F)
dualTrials$test_type = relevel(dualTrials$test_type, ref = "count")
dualTrials$map_0 = NULL
dualTrials$map_1 = NULL
dualTrials = na.omit(dualTrials)
#| warning: false
gd = groupedData(log(rt) ~ cue_type + map_type + test_type + acc + trialNumTotal|id,
data = dualTrials)
lm_separate = lmList(log(rt) ~  cue_type + map_type + test_type + acc + trialNumTotal,
data = gd)
#| warning: false
gd = groupedData(log(rt) ~ cue_type + map_type + test_type + acc + trialNumTotal|id,
data = dualTrials)
lm_separate = nlme::lmList(log(rt) ~  cue_type + map_type + test_type + acc + trialNumTotal,
data = gd)
plot(intervals(lm_separate))
ri_model = lme(log(rt) ~ cue_type + map_type + test_type + acc + trialNumTotal,
random = ~ 1 | id, data = dualTrials)
rirs_model = update(ri_model, random = ~ 1 + acc | id)
anova(ri_model, rirs_model)
d_squared = getVarCov(ri_model)[1]
sigma_squared = ri_model$sigma^2
icc = d_squared / (d_squared + sigma_squared)
#| warning: false
res = resid(ri_model, level = 0)
preds = predict(ri_model, level = 0)
res_df = data.frame(id = names(res),
res = res, preds = preds)
ggplot(res_df, aes(preds, res)) +
geom_point(alpha = .5) +
geom_smooth(aes(col = id), alpha = .3, method = "loess", se = FALSE) +
geom_smooth(method = "loess", se = FALSE, size = 2, col = "black") +
geom_hline(yintercept = 0, lty = "dashed")+
scale_x_continuous(expand = c(0, 0),
breaks = seq(-0.2, 0.5, 0.1),
limits = c(-0.25, 0.55)) +
scale_y_continuous(expand = c(0, 0),
breaks = seq(-1.5, 1.5, 0.5),
limits = c(-1.7, 1.7)) +
xlab("predicted means") +
ylab("residuals") +
labs(col = "Subject") +
theme_minimal() +
theme(
panel.border = element_rect(colour = "gray", fill=NA, size=1),
axis.text = element_text(size = 10),
axis.title.x = element_text(margin = margin(t = 20)),
axis.title.y = element_text(margin = margin(r = 20)),
axis.title = element_text(size = 14, face = "bold"),
panel.spacing = unit(2.5, "lines"),
plot.margin = margin(1, 1, 0, 0, "cm")
)
# tidy(ri_model)
summary(ri_model)
glmer(acc ~ cue_type + map_type + test_type + acc + trialNumTotal + (1|id),
data=dualTrials,
family=binomial)
glmer(acc ~ cue_type + map_type + test_type + acc + trialNumTotal + (1|id),
data=dualTrials, family=binomial, nAGQ=20)
glmer(acc ~ cue_type + map_type + test_type + trialNumTotal + (1|id),
data=dualTrials, family=binomial, nAGQ=20)
ri_gmodel = glmer(acc ~ cue_type + map_type + test_type + trialNumTotal + (1|id),
data=dualTrials, family=binomial, nAGQ=20)
ri_gmodel = glmer(acc ~ cue_type + map_type + test_type + trialNumTotal + (1|id),
data=dualTrials, family=binomial, nAGQ=20)
summary(ri_gmodel)
View(dualTrials)
ri_gmodel = glmer(acc ~ cue_type + map_type + test_type + trialNumTotal + trans_ub + (1|id),
data=dualTrials, family=binomial, nAGQ=20)
summary(ri_gmodel)
ri_gmodel = glmer(
acc ~ cue_type + map_type + test_type + trialNumTotal + trans_ub + I(trans_ub - trans_lb) + (1|id),
data=dualTrials, family=binomial, nAGQ=20)
summary(ri_gmodel)
rirs_model = update(ri_model, fixed = trans_ub)
rirs_model = update(ri_model, fixed = log(rt) ~ cue_type + map_type + test_type + acc + trialNumTotal + trans_ub)
# I(trans_ub - trans_lb)
rirs_model_b = update(ri_model, fixed = log(rt) ~ cue_type + map_type + test_type + acc + trialNumTotal + trans_ub + I(trans_ub - trans_lb))
rirs_model_b = update(
ri_model, fixed = log(rt) ~ cue_type + map_type + test_type + acc +
trialNumTotal + trans_ub + I(trans_ub - trans_lb))
summary(rirs_model_b)
ri_model = lme(log(rt) ~ trialNumTotal*(cue_type + map_type + test_type + acc),
random = ~ 1 | id, data = dualTrials)
rirs_model = update(ri_model, random = ~ 1 + acc | id)
anova(ri_model, rirs_model)
d_squared = getVarCov(ri_model)[1]
sigma_squared = ri_model$sigma^2
icc = d_squared / (d_squared + sigma_squared)
#| warning: false
res = resid(ri_model, level = 0)
preds = predict(ri_model, level = 0)
res_df = data.frame(id = names(res),
res = res, preds = preds)
ggplot(res_df, aes(preds, res)) +
geom_point(alpha = .5) +
geom_smooth(aes(col = id), alpha = .3, method = "loess", se = FALSE) +
geom_smooth(method = "loess", se = FALSE, size = 2, col = "black") +
geom_hline(yintercept = 0, lty = "dashed")+
scale_x_continuous(expand = c(0, 0),
breaks = seq(-0.2, 0.5, 0.1),
limits = c(-0.25, 0.55)) +
scale_y_continuous(expand = c(0, 0),
breaks = seq(-1.5, 1.5, 0.5),
limits = c(-1.7, 1.7)) +
xlab("predicted means") +
ylab("residuals") +
labs(col = "Subject") +
theme_minimal() +
theme(
panel.border = element_rect(colour = "gray", fill=NA, size=1),
axis.text = element_text(size = 10),
axis.title.x = element_text(margin = margin(t = 20)),
axis.title.y = element_text(margin = margin(r = 20)),
axis.title = element_text(size = 14, face = "bold"),
panel.spacing = unit(2.5, "lines"),
plot.margin = margin(1, 1, 0, 0, "cm")
)
# tidy(ri_model)
summary(ri_model)
ri_gmodel = glmer(
acc ~ trialNumTotal + map_type + test_type + I(trans_ub - trans_lb) + (1|id),
data=dualTrials, family=binomial, nAGQ=20)
summary(ri_gmodel)
ri_gmodel = glmer(
acc ~ trialNumTotal * map_type + test_type + trans_ub + (1|id),
data=dualTrials, family=binomial, nAGQ=20)
summary(ri_gmodel)
ri_gmodel = glmer(
acc ~ trialNumTotal + map_type + test_type + (1|id),
data=dualTrials, family=binomial, nAGQ=20)
summary(ri_gmodel)
ri_gmodel = glmer(
acc ~ trialNumTotal + cue_type + map_type + test_type + (1|id),
data=dualTrials, family=binomial, nAGQ=20)
summary(ri_gmodel)
View(ri_gmodel)
ri_gmodel$beta[1]
ri_gmodel$beta
View(ri_gmodel)
ri_gmodel@beta
ri_gmodel@beta[1]
ri_gmodel@beta[5]
